* 4.0.1 Jul 23 2019

- Update testWrite.py to be compatible with windows, add "--help" option and usage, validate when arguments are provided

- Regenerate and move experimental patch into "experimental" directory (not ready for production use, not included in pypi package)

* 4.0.0 Jan 6 2017
- Update testWrite.py program for better testing of I/O priority levels in
BackgroundWrite given your default load
- Fixup equations in BackgroundWrite to better guarentee a given priority
(bandwidth percent)
- Fine-Tune default I/O priority levels in BackgroundWrite to ensure a higher
overall performance, a more constant difference between other task priorities
and this task priority, less of a difference in default block size, etc.
- Minor optimizations in BackgroundWrite
- BACKWORDS-INCOMPATIBLE: BackgroundIOPriority now has a different constructor, so if you specified
custom priorities (instead of passing ioprio=1-9) these will need to be
adjusted.
- Make ioprio=1 not sleep at all, i.e. maximum available I/O in background


* 3.0.0 Feb 5 2016
- BUGFIX: Fix typo in MANIFEST.in
- FEATURE: Update nonblock_read so it works with socket-like objects as well as file-like
streams.
- FEATURE: Improve the mode autodetect (which can be used standalone via
nonblock.common.detect_stream_mode). You should never need to provide an
explicit mode now, but the param and functionality will remain for
backwards compatibility
- FEATURE: Add background reading through "bgread(stream,
blockSizeLimit, pollTime)". This returns an object which will automatically be
populated with data by a thread which is started and runs in the background.
See docstring for more information.

* 2.0.0 Dec 31 2015
- Implement interactive non-blocking background writing. This allows you to
fork writing to files (otherwise a blocking operation) into the background,
with a configurable I/O priority associated. The lower the priority number, the
higher the throughput, but the higher that number, the higher interactivity
(throughput is throttled and other tasks, e.g. cpu-bound calculations, get
more time and priority. There are heuristics going on here, and the ability to
chain multiple datasets to the same file, so this is
more/better than just throwing a thread into the background.

- Split the read portion into read.py and out of __init__.py

* 1.0.0 Dec 18 2015 
- Initial Release, nonblocking read function - nonblock_read
